# GraphQL schema

# Authentication Schema
type User {
    id: Int!
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    avatar: String!
    birthday: Int!
    bio: String!
    facebook: String!
    instagram: String!
    twitter: String!
    isAdmin: Boolean!
    createdAt: Int!
    updatedAt: Int!
}

type Post {
    id: Int!
    authorID: Int!
    parentID: Int!
    title: String!
    published: Boolean!
    upVote: Int!
    content: String!
    createdAt: Int!
    updatedAt: Int!
    publishedAt: Int!
}

type Comment {
    id: Int!
    postID: Int!
    authorID: Int!
    content: String!
    upVote: Int!
    createdAt: Int!
    updatedAt: Int!
}

input NewComment {
    id: Int!
    postID: Int!
    authorID: Int!
    content: String!
}

type Category {
    id: Int!
    title: String!
    slug: String!
    content: String!
    createdAt: Int!
    updatedAt: Int!
}

input NewCategory {
    id: Int!
    title: String!
    slug: String!
    content: String!
}

type PostCategory {
    postID: Int!
    categoryID: Int!
}

type AuthResponse {
    message: String!
    user: User!
}

input EditedUser {
    username: String!
    firstName: String!
    lastName: String!
    avatar: String!
    birthday: Int!
    bio: String!
    facebook: String!
    instagram: String!
    twitter: String!
}

input NewPost {
    id: Int!
    authorID: Int!
    parentID: Int!
    title: String!
    content: String!
}

type Token {
    token: String!
    expireAt: Int!
}

type Query {
    users: [User!]!
}

type getUserByIdResponse {
    message: String!
    user: User!
}

type getAllUsersResponse {
    message: String!
    users: [User!]!
}

type EditUserResponse {
    message: String!
    user: User!
}

type DeleteUserResponse {
    message: String!
    user: User!
}

type getPostByIdResponse {
    message: String!
    post: Post!
}

type getPostsResponse {
    message: String!
    posts: [Post!]!
}

type getCommentsResponse {
    message: String!
    comments: [Comment!]!
}

type getCategoriesResponse {
    message: String!
    categories: [Category!]!
}

type getCategoryResponse {
    message: String!
    category: Category!
}

type upVotes {
    message: String!
    newUpVotes: Int!
}

type addNewCommentResponse {
    message: String!
    commentID: Int!
}

type postCategoryResponse {
    message: String!
    postID: Int!
}

type Mutation {
    register(email: String!, password: String!): AuthResponse!
    login(email: String!, password: String!): AuthResponse!
    getUserById(requestorId: Int!, userId: Int!): getUserByIdResponse!
    getAllUsers(adminId: Int!): getAllUsersResponse!
    editUser(userId: Int!, editedUser: EditedUser!): EditUserResponse!
    deleteUser(adminId: Int!, userId: Int!): DeleteUserResponse!

    getPostById(requesterId: Int!, postId: Int!): getPostByIdResponse!
    getUserAllPosts(ownerId: Int!, offset: Int!, limit: Int!): getPostsResponse!
    getUserPublishedPosts(requesterId: Int!, userId: Int!, offset: Int!, limit: Int!): getPostsResponse!
    getUserUnPublishedPosts(ownerId: Int!, offset: Int!, limit: Int!): getPostsResponse!
    getCategoryPosts(categoryId: Int!, offset: Int!, limit: Int!): getPostsResponse!
    addNewPost(newPost: NewPost!): getPostByIdResponse!
    editPost(newPost: NewPost!): getPostByIdResponse!
    deletePost(requesterId: Int!, postId: Int!): getPostByIdResponse!
    publishPost(requesterId: Int!, postId: Int!): getPostByIdResponse!
    unPublishPost(requesterId: Int!, postId: Int!): getPostByIdResponse!
    upVotePost(upVoterId: Int!, postId: Int!): upVotes!

    getPostComments(postId: Int!, offset: Int!, limit: Int!): getCommentsResponse!
    getUserComments(authorId: Int!, offset: Int!, limit: Int!): getCommentsResponse!
    addComment(newComment: NewComment!): addNewCommentResponse!
    editComment(newComment: NewComment!): addNewCommentResponse!
    deleteComment(authorId: Int!, commentId: Int!): addNewCommentResponse!
    upVoteComment(commentId: Int!): upVotes!
    downVoteComment(commentId: Int!): upVotes!


    getAllCategories(requesterId: Int!): getCategoriesResponse!
    getPostCategories(postId: Int!): getCategoriesResponse!
    addNewCategory(newCategory: NewCategory!): getCategoryResponse!
    editCategory(newCategory: NewCategory!): getCategoryResponse!
    deleteCategory(categoryId: Int!): getCategoryResponse!
    addPostToCategory(categoryId: Int!, postId: Int!): postCategoryResponse!
    removePostFromCategory(categoryId: Int!, postId: Int!): postCategoryResponse!
}